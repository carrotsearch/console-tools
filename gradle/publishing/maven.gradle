
configure(rootProject) {
  def mavenBuildRepo = project.layout.buildDirectory.dir("maven").get().asFile

  def published = [
    ":formatters",
    ":launcher",
    ":testing"
  ]

  tasks.register("mavenLocalClean", Delete, {
    delete mavenBuildRepo
  })

  tasks.register("publishLocal", {
    group = "Publishing"
    description = "Publish Maven artifacts locally to " + file(mavenBuildRepo)
  })

  tasks.register("publishSonatype", {
    group = "Publishing"
    description = "Publish Maven artifacts to Sonatype OSS Nexus"
  })

  configure(subprojects.findAll { it.path in published }) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    plugins.withType(JavaPlugin).configureEach {
      publishing {
        repositories {
          maven {
            name = 'build'
            url = mavenBuildRepo
          }

          maven {
            name = 'sonatype'
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"

            credentials {
              if (project.hasProperty('nexusUsername')) {
                username = project.nexusUsername
              }
              if (project.hasProperty('nexusPassword')) {
                password = project.nexusPassword
              }
            }
          }
        }
      }

      java {
        withSourcesJar()
        withJavadocJar()
      }

      publishing {
        def configurePom = {
          name = "${project.name}"
          description = "${project.name}"
          url = 'https://github.com/carrotsearch/console-tools'
          inceptionYear = "2019"

          licenses {
            license {
              name = 'BSD License'
              url = 'https://github.com/carrotsearch/console-tools/blob/master/LICENSE.txt'
            }
          }

          organization {
            name = "Carrot Search s.c."
            url = "https://www.carrotsearch.com"
          }

          developers {
            developer {
              id = 'stanislaw.osinski'
              name = 'Stanisław Osiński'
              email = 'stanislaw.osinski@carrotsearch.com'
            }
            developer {
              id = 'dawid.weiss'
              name = 'Dawid Weiss'
              email = 'dawid.weiss@carrotsearch.com'
            }
          }
          scm {
            connection = 'scm:git:git@github.com:carrotsearch/console-tools.git'
            developerConnection = 'scm:git:git@github.com:carrotsearch/console-tools.git'
            url = 'https://github.com/carrotsearch/console-tools'
          }
        }

        publications {
          jars(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = project.base.archivesName.get()

            pom(configurePom)
          }

          maven(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = project.base.archivesName.get()

            pom(configurePom)
          }
        }
      }

      signing {
        sign publishing.publications.maven
      }

      publishJarsPublicationToBuildRepository.dependsOn mavenLocalClean
      publishLocal.dependsOn publishJarsPublicationToBuildRepository
      publishSonatype.dependsOn publishMavenPublicationToSonatypeRepository
    }
  }
}
